openapi: 3.0.3
info:
  title: The goakit example upstream service
  description: Fetcher is a service that makes GET requests to arbitrary URLs and stores the results in the downstream 'archiver' service.
  version: "1.0"
servers:
- url: http://localhost:80
  description: Default server for fetcher
paths:
  /fetch/{url}:
    get:
      tags:
      - fetcher
      summary: fetch fetcher
      description: Fetch makes a GET request to the given URL and stores the results in the archiver service which must be running or the request fails
      operationId: fetcher#fetch
      parameters:
      - name: url
        in: path
        description: URL to be fetched
        required: true
        schema:
          type: string
          description: URL to be fetched
          example: http://johnston.biz/mitchel_jast
          format: uri
        example: http://labadie.org/courtney
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchMedia'
              example:
                archive_href: /archive/1
                status: 200
        "400":
          description: ""
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                fault: true
                id: 123abc
                message: parameter 'p' must be an integer
                name: bad_request
                temporary: true
                timeout: false
        "500":
          description: ""
          content:
            application/vnd.goa.error:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                fault: true
                id: 123abc
                message: parameter 'p' must be an integer
                name: bad_request
                temporary: true
                timeout: true
  /health:
    get:
      tags:
      - health
      summary: show health
      description: Health check endpoint
      operationId: health#show
      responses:
        "200":
          description: ""
          content:
            text/plain:
              schema:
                type: string
                example: Sint fugit nesciunt.
              example: Ut cumque.
components:
  schemas:
    Error:
      type: object
      properties:
        fault:
          type: boolean
          description: Is the error a server-side fault?
          example: true
        id:
          type: string
          description: ID is a unique identifier for this particular occurrence of the problem.
          example: 123abc
        message:
          type: string
          description: Message is a human-readable explanation specific to this occurrence of the problem.
          example: parameter 'p' must be an integer
        name:
          type: string
          description: Name is the name of this class of errors.
          example: bad_request
        temporary:
          type: boolean
          description: Is the error temporary?
          example: false
        timeout:
          type: boolean
          description: Is the error a timeout?
          example: true
      example:
        fault: false
        id: 123abc
        message: parameter 'p' must be an integer
        name: bad_request
        temporary: false
        timeout: true
      required:
      - name
      - id
      - message
      - temporary
      - timeout
      - fault
    FetchMedia:
      type: object
      properties:
        archive_href:
          type: string
          description: The href to the corresponding archive in the archiver service
          example: /archive/1
          pattern: ^/archive/[0-9]+$
        status:
          type: integer
          description: HTTP status code returned by fetched service
          example: 200
          minimum: 0
      example:
        archive_href: /archive/1
        status: 200
      required:
      - status
      - archive_href
